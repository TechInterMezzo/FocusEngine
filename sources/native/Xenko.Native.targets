<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Condition="Exists('$(MSBuildProjectDirectory)\Xenko.Native.Libs.targets')" Project="$(MSBuildProjectDirectory)\Xenko.Native.Libs.targets" />

  <PropertyGroup>
    <!-- ignore bin and obj folders -->
    <XenkoNativeDefaultItemExcludes>$(XenkoNativeDefaultItemExcludes);$(BaseOutputPath)/**</XenkoNativeDefaultItemExcludes>
    <XenkoNativeDefaultItemExcludes>$(XenkoNativeDefaultItemExcludes);$(BaseIntermediateOutputPath)/**</XenkoNativeDefaultItemExcludes>
  </PropertyGroup>  
  <ItemGroup>
    <XenkoNativeCFile Include="**\*.c;**\*.cpp" Exclude="$(XenkoNativeDefaultItemExcludes)" />
    <XenkoNativeHFile Include="**\*.h;**\*.hpp" Exclude="$(XenkoNativeDefaultItemExcludes)" />
  </ItemGroup>

  <PropertyGroup>
    <XenkoNativeAndroidGCC>-nostdlib -ldl -lstdc++ -lc -lm</XenkoNativeAndroidGCC>
    
    <!--Use "-v" to debug the tooling -->
    <XenkoNativeToolingDebug></XenkoNativeToolingDebug> 
    
    <XenkoNativeClang>$(XenkoNativeToolingDebug) -Wno-ignored-attributes -Wno-delete-non-virtual-dtor -Wno-macro-redefined -I&quot;$(XenkoDependenciesDir)\NativePath&quot; -I&quot;$(XenkoDependenciesDir)\NativePath\standard&quot;</XenkoNativeClang>
    <XenkoNativeClang Condition="'$(XenkoPlatform)' == 'Linux'">$(XenkoNativeClang) -DPLATFORM_LINUX</XenkoNativeClang>
    <XenkoNativeClang Condition="'$(XenkoPlatform)' == 'macOS'">$(XenkoNativeClang) -DPLATFORM_MACOS</XenkoNativeClang>
    <XenkoNativeClangCPP>-std=c++11 -fno-rtti -fno-exceptions</XenkoNativeClangCPP>
  
    <!--<XenkoNativeOutputPath>$([MSBuild]::MakeRelative('$(OutputPath)', '$(XenkoPackageXenkoPlatformBin)\'))</XenkoNativeOutputPath>-->
    <AllowedOutputExtensionsInPackageBuildOutputFolder>.so; .a; $(AllowedOutputExtensionsInPackageBuildOutputFolder)</AllowedOutputExtensionsInPackageBuildOutputFolder>
  </PropertyGroup>

  <Choose>
    <When Condition="('$(XenkoPlatform)' == 'UWP')">
      <PropertyGroup>
        <XenkoNativeClang Condition="'$(Configuration)' == 'Debug'">$(XenkoNativeClang) -Od</XenkoNativeClang>
        <XenkoNativeClang Condition="'$(Configuration)' == 'Release'">$(XenkoNativeClang) -O2</XenkoNativeClang>
      </PropertyGroup>
    </When>
    <Otherwise>
      <PropertyGroup>
        <XenkoNativeClang Condition="'$(Configuration)' == 'Debug'">$(XenkoNativeClang) -O0 -g</XenkoNativeClang>
        <XenkoNativeClang Condition="'$(Configuration)' == 'Release'">$(XenkoNativeClang) -O3</XenkoNativeClang>
      </PropertyGroup>
    </Otherwise>
  </Choose>

  <!-- Define NEED_DLL_EXPORT for platforms that requires it. -->
  <PropertyGroup>
    <XenkoNativeClang Condition=" '$(XenkoPlatform)' == 'Windows'">$(XenkoNativeClang) -DNEED_DLL_EXPORT</XenkoNativeClang>
  </PropertyGroup>
  
  <!-- Define default CPU architectures -->
  <ItemGroup>
    <XenkoNativeCPU Condition=" '$(XenkoPlatform)' == 'Windows'" Include="x64"/>
  </ItemGroup>
  
  <!-- Define default dynamic library extensions -->
  <PropertyGroup>
    <XenkoNativeLibraryTargetExt Condition="'$(XenkoPlatform)' == 'Windows'">.dll</XenkoNativeLibraryTargetExt>
    <XenkoNativeLibraryTargetExt Condition="'$(XenkoPlatform)' == 'macOS'">.dylib</XenkoNativeLibraryTargetExt>
  </PropertyGroup>
  
  <ItemGroup>
    <!-- Sepcial case: no CPU-specific libraries, output at top level -->
    <_XenkoNativeOutput Condition="'@(XenkoNativeCPU)'==''" Include="$(XenkoNativeOutputName)$(XenkoNativeLibraryTargetExt)">
      <RelativePath>%(Identity)</RelativePath>
    </_XenkoNativeOutput>
    <!-- One output file per CPU -->
    <_XenkoNativeOutput Include="@(XenkoNativeCPU->'%(Identity)\$(XenkoNativeOutputName)$(XenkoNativeLibraryTargetExt)')">
      <RelativePath>%(Identity)</RelativePath>
    </_XenkoNativeOutput>
  </ItemGroup>

  <ItemGroup>
    <UpToDateCheckInput Include="@(XenkoNativeCFile)" />
    <UpToDateCheckInput Include="@(XenkoNativeHFile)" />
    <UpToDateCheckOutput Include="@(XenkoNativeOutput)" />
  </ItemGroup>
  
  <!-- Update XenkoNativeOutput.Link using computed OutputPath and add to XenkoNativeLib -->
  <Target Name="_XenkoRegisterNativeOutputs" Condition="'$(TargetFramework)' != ''" BeforeTargets="_XenkoRegisterDependenciesOutputs;_XenkoGenerateDependencies">
    <PropertyGroup>
      <OutputObjectPath>$(MSBuildProjectDirectory)\$(IntermediateOutputPath)</OutputObjectPath>
      <XenkoNativeOutputPath>$([System.IO.Path]::GetFullPath('$(OutputPath)'))</XenkoNativeOutputPath>
      <_OutputPathRelative>$([System.IO.Path]::GetFullPath('$(OutputPath)'))</_OutputPathRelative>
    </PropertyGroup>
    <ItemGroup>
      <XenkoNativeOutput Include="@(_XenkoNativeOutput->'$(XenkoNativeOutputPath)%(Identity)')"/>
      <XenkoNativeOutput>
        <Link>$([MSBuild]::MakeRelative('$(_OutputPathRelative)', '$(XenkoNativeOutputPath)'))\%(RelativePath)</Link>        
      </XenkoNativeOutput>
      <XenkoNativeLib Include="@(XenkoNativeOutput)"/>
    </ItemGroup>
  </Target>

  <Target Name="_XenkoNativeTouchAfterCompile" AfterTargets="CoreCompile">
    <!-- This is necessary for UpToDateCheck: CompileNativeClang is checking only XenkoNativeOutput against native sources
         but FastUpToDateCheck check XenkoNativeOutput against various other unrelated files such as C# sources, so we want to mark the file as modified after, even if CompileNativeClang was skipped -->
    <Touch Files="@(XenkoNativeOutput)" />
  </Target>

  <!-- Define ItemGroup so that they are properly copied -->
  <!-- Disabled since it doesn't play nice because file is not output yet when we are building ourselves. Also MSBuild doesn't copy reference of sub project if CopyLocal is false -->
  <!--<PropertyGroup>
    <AssignTargetPathsDependsOn>
      $(AssignTargetPathsDependsOn);
      _XenkoRegisterNativeOutputs;
    </AssignTargetPathsDependsOn>
  </PropertyGroup>
  <Target Name="_XenkoRegisterNativeOutputs">
    <Message Importance="High" Text="XenkoNativeOutput: @(XenkoNativeOutput->'%(TargetFullPath)')"/>
    <ItemGroup>
      <Content Include="@(XenkoNativeOutput->'%(TargetFullPath)')" KeepMetadata="Nothing">
        <Link>%(XenkoNativeOutput.Identity)</Link>
        <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      </Content>
    </ItemGroup>
  </Target>-->

  <!--<Target Name="_XenkoGenerateNativeFile" BeforeTargets="Build">
    <Touch AlwaysCreate="true" Files="$(OutputPath)\$(XenkoNativeOutputName).ss_native"/>
  </Target>-->
  
  <Target Name="CompileNativeClang_Windows" Inputs="@(XenkoNativeCFile);@(XenkoNativeHFile)" Outputs="@(XenkoNativeOutput)" Condition="'$(XenkoPlatform)' == 'Windows' And $(DesignTimeBuild) != true And $(BuildingProject) != false" BeforeTargets="CoreCompile" DependsOnTargets="_XenkoRegisterNativeOutputs">
    <MakeDir Directories="$(OutputObjectPath)\x64"/>
    <Exec Condition="'%(XenkoNativeCFile.Extension)' != '.cpp'" Command="&quot;$(XenkoDependenciesDir)\LLVM\clang.exe&quot; -gcodeview -fno-ms-extensions -nobuiltininc -nostdinc++ $(XenkoNativeClang) -o &quot;$(OutputObjectPath)\x64\%(XenkoNativeCFile.Filename).obj&quot; -c &quot;%(XenkoNativeCFile.FullPath)&quot; -fms-extensions -DWINDOWS_DESKTOP -target x86_64-pc-windows-msvc" />
    <Exec Condition="'%(XenkoNativeCFile.Extension)' == '.cpp'" Command="&quot;$(XenkoDependenciesDir)\LLVM\clang.exe&quot; -gcodeview -fno-ms-extensions -nobuiltininc -nostdinc++ $(XenkoNativeClangCPP) $(XenkoNativeClang) -o &quot;$(OutputObjectPath)\x64\%(XenkoNativeCFile.Filename).obj&quot; -c &quot;%(XenkoNativeCFile.FullPath)&quot;  -fms-extensions -DWINDOWS_DESKTOP -target x86_64-pc-windows-msvc" />
    <MSBuild Projects="$(MSBuildThisFileDirectory)\WindowsProjects\WindowsDesktop\WindowsDesktop.vcxproj" Targets="Build" Properties="XenkoNativeOutputName=$(XenkoNativeOutputName);XenkoNativeOutputDir=$(XenkoNativeOutputPath)x64;XenkoDependenciesDir=$(XenkoDependenciesDir);XenkoNativePathLibs=libNativePath.lib $(XenkoNativePathLibs);XenkoNativeProjectFolder=$(ProjectDir);XenkoNativeProjectObjFolder=$(OutputObjectPath)\x64;Configuration=$(Configuration);Platform=x64" StopOnFirstFailure="true" />

    <!-- Workaround: forcing C# rebuild so that timestamp are up to date (ideally we should have separate input/output groups for C# and Native) -->
    <Delete Files="@(IntermediateAssembly)"/>
  </Target>

  <!-- RELEASE.TXT does not seem to exist anymore
  <PropertyGroup Condition="Exists('$(AndroidNdkDirectory)\RELEASE.TXT')">
    <XenkoNativeAndroidIs64Bit Condition="'$([System.Text.RegularExpressions.Regex]::Match($([System.IO.File]::ReadAllText(`$(AndroidNdkDirectory)\RELEASE.TXT`)), `r\d\d\w?\s\(64-bit\)`).Success)' == 'true'">-x86_64</XenkoNativeAndroidIs64Bit>
    <XenkoNativeAndroidIs64Bit Condition="'$([System.Text.RegularExpressions.Regex]::Match($([System.IO.File]::ReadAllText(`$(AndroidNdkDirectory)\RELEASE.TXT`)), `r\d\d\w?\s\(64-bit\)`).Success)' == 'false'"></XenkoNativeAndroidIs64Bit>
  </PropertyGroup>
  -->

  <Target Name="CompileNativeClang_Linux" Inputs="@(XenkoNativeCFile);@(XenkoNativeHFile)" Outputs="@(XenkoNativeOutput)" Condition="'$(XenkoPlatform)' == 'Linux' And $(DesignTimeBuild) != true And $(BuildingProject) != false" BeforeTargets="CoreCompile" DependsOnTargets="_XenkoRegisterNativeOutputs">
    <Exec Condition="'%(XenkoNativeCFile.Extension)' != '.cpp'" Command="&quot;$(XenkoDependenciesDir)\LLVM\clang.exe&quot; $(XenkoNativeClang) -o &quot;$(OutputObjectPath)\%(XenkoNativeCFile.Filename)_x64.o&quot; -c &quot;%(XenkoNativeCFile.FullPath)&quot; -fPIC -target x86_64-linux-gnu" />
    <Exec Condition="'%(XenkoNativeCFile.Extension)' == '.cpp'" Command="&quot;$(XenkoDependenciesDir)\LLVM\clang.exe&quot; $(XenkoNativeClangCPP) $(XenkoNativeClang) -o &quot;$(OutputObjectPath)\%(XenkoNativeCFile.Filename)_x64.o&quot; -c &quot;%(XenkoNativeCFile.FullPath)&quot; -fPIC -target x86_64-linux-gnu" />
    <Exec Command="&quot;$(XenkoDependenciesDir)\LLVM\lld.exe&quot; -flavor gnu --eh-frame-hdr -m elf_x86_64 -shared -o &quot;$(XenkoNativeOutputPath)\$(XenkoNativeOutputName)$(XenkoNativeLibraryTargetExt)&quot; @(XenkoNativeCFile->'&quot;$(OutputObjectPath)\%(Filename)_x64.o&quot;', ' ') @(XenkoNativePathLibs2->'&quot;$(XenkoDependenciesDir)\NativePath\Linux\x86_64\%(Filename).a&quot;', ' ') &quot;$(XenkoDependenciesDir)\NativePath\Linux\x86_64\libNativePath.a&quot;" />
  </Target>

  <Target Name="CompileNativeClang_macOS" Inputs="@(XenkoNativeCFile);@(XenkoNativeHFile)" Outputs="@(XenkoNativeOutput)" Condition="'$(XenkoPlatform)' == 'macOS' And $(DesignTimeBuild) != true And $(BuildingProject) != false" BeforeTargets="CoreCompile" DependsOnTargets="_XenkoRegisterNativeOutputs">
    <Exec Condition="'%(XenkoNativeCFile.Extension)' != '.cpp'" Command="&quot;$(XenkoDependenciesDir)\LLVM\clang.exe&quot; $(XenkoNativeClang) -o &quot;$(OutputObjectPath)\%(XenkoNativeCFile.Filename)_x64.o&quot; -c &quot;%(XenkoNativeCFile.FullPath)&quot; -fPIC -target x86_64-apple-darwin" />
    <Exec Condition="'%(XenkoNativeCFile.Extension)' == '.cpp'" Command="&quot;$(XenkoDependenciesDir)\LLVM\clang.exe&quot; $(XenkoNativeClangCPP) $(XenkoNativeClang) -o &quot;$(OutputObjectPath)\%(XenkoNativeCFile.Filename)_x64.o&quot; -c &quot;%(XenkoNativeCFile.FullPath)&quot; -fPIC -target x86_64-apple-darwin" />
    <Exec Command="&quot;$(XenkoDependenciesDir)\LLVM\darwin_ld.exe&quot; -arch x86_64 -w -flat_namespace -undefined dynamic_lookup -sdk_version 10.11  -macosx_version_min 10.11 -dylib -o &quot;$(XenkoNativeOutputPath)\$(XenkoNativeOutputName)$(XenkoNativeLibraryTargetExt)&quot; @(XenkoNativeCFile->'&quot;$(OutputObjectPath)\%(Filename)_x64.o&quot;', ' ') @(XenkoNativePathLibs2->'&quot;$(XenkoDependenciesDir)\NativePath\$(XenkoPlatform)\%(Filename).a&quot;', ' ') &quot;$(XenkoDependenciesDir)\NativePath\$(XenkoPlatform)\libNativePath.a&quot;" />

    <!-- Workaround: forcing C# rebuild so that timestamp are up to date (ideally we should have separate input/output groups for C# and Native) -->
    <Delete Files="@(IntermediateAssembly)"/>
  </Target>
  
  <Target Name="CompileNativeClang_Clean" BeforeTargets="Clean" DependsOnTargets="_XenkoRegisterNativeOutputs">
    <ItemGroup Condition="'$(OutputObjectPath)' != ''">
      <ObjFiles Include="$(OutputObjectPath)\**\*.obj" />
      <OFiles Include="$(OutputObjectPath)\**\*.o" />
      <AFiles Include="$(OutputObjectPath)\**\*.a" />
    </ItemGroup>
    <Delete Files="@(XenkoNativeOutput)" />
    <Delete Files="@(ObjFiles)" />
    <Delete Files="@(OFiles)" />
    <Delete Files="@(AFiles)" />
  </Target>
</Project>
